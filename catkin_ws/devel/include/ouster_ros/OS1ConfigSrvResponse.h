// Generated by gencpp from file ouster_ros/OS1ConfigSrvResponse.msg
// DO NOT EDIT!


#ifndef OUSTER_ROS_MESSAGE_OS1CONFIGSRVRESPONSE_H
#define OUSTER_ROS_MESSAGE_OS1CONFIGSRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ouster_ros
{
template <class ContainerAllocator>
struct OS1ConfigSrvResponse_
{
  typedef OS1ConfigSrvResponse_<ContainerAllocator> Type;

  OS1ConfigSrvResponse_()
    : hostname()
    , lidar_mode()
    , beam_azimuth_angles()
    , beam_altitude_angles()
    , imu_to_sensor_transform()
    , lidar_to_sensor_transform()  {
    }
  OS1ConfigSrvResponse_(const ContainerAllocator& _alloc)
    : hostname(_alloc)
    , lidar_mode(_alloc)
    , beam_azimuth_angles(_alloc)
    , beam_altitude_angles(_alloc)
    , imu_to_sensor_transform(_alloc)
    , lidar_to_sensor_transform(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hostname_type;
  _hostname_type hostname;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lidar_mode_type;
  _lidar_mode_type lidar_mode;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _beam_azimuth_angles_type;
  _beam_azimuth_angles_type beam_azimuth_angles;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _beam_altitude_angles_type;
  _beam_altitude_angles_type beam_altitude_angles;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _imu_to_sensor_transform_type;
  _imu_to_sensor_transform_type imu_to_sensor_transform;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _lidar_to_sensor_transform_type;
  _lidar_to_sensor_transform_type lidar_to_sensor_transform;





  typedef boost::shared_ptr< ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct OS1ConfigSrvResponse_

typedef ::ouster_ros::OS1ConfigSrvResponse_<std::allocator<void> > OS1ConfigSrvResponse;

typedef boost::shared_ptr< ::ouster_ros::OS1ConfigSrvResponse > OS1ConfigSrvResponsePtr;
typedef boost::shared_ptr< ::ouster_ros::OS1ConfigSrvResponse const> OS1ConfigSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ouster_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'ouster_ros': ['/home/nvidia/catkin_ws/src/ouster_example/ouster_ros/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb865a85fb3f39f43bf99730f10225b5";
  }

  static const char* value(const ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb865a85fb3f39f4ULL;
  static const uint64_t static_value2 = 0x3bf99730f10225b5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ouster_ros/OS1ConfigSrvResponse";
  }

  static const char* value(const ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string hostname\n"
"string lidar_mode\n"
"float64[] beam_azimuth_angles\n"
"float64[] beam_altitude_angles\n"
"float64[] imu_to_sensor_transform\n"
"float64[] lidar_to_sensor_transform\n"
;
  }

  static const char* value(const ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hostname);
      stream.next(m.lidar_mode);
      stream.next(m.beam_azimuth_angles);
      stream.next(m.beam_altitude_angles);
      stream.next(m.imu_to_sensor_transform);
      stream.next(m.lidar_to_sensor_transform);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OS1ConfigSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ouster_ros::OS1ConfigSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "hostname: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hostname);
    s << indent << "lidar_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lidar_mode);
    s << indent << "beam_azimuth_angles[]" << std::endl;
    for (size_t i = 0; i < v.beam_azimuth_angles.size(); ++i)
    {
      s << indent << "  beam_azimuth_angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.beam_azimuth_angles[i]);
    }
    s << indent << "beam_altitude_angles[]" << std::endl;
    for (size_t i = 0; i < v.beam_altitude_angles.size(); ++i)
    {
      s << indent << "  beam_altitude_angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.beam_altitude_angles[i]);
    }
    s << indent << "imu_to_sensor_transform[]" << std::endl;
    for (size_t i = 0; i < v.imu_to_sensor_transform.size(); ++i)
    {
      s << indent << "  imu_to_sensor_transform[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.imu_to_sensor_transform[i]);
    }
    s << indent << "lidar_to_sensor_transform[]" << std::endl;
    for (size_t i = 0; i < v.lidar_to_sensor_transform.size(); ++i)
    {
      s << indent << "  lidar_to_sensor_transform[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lidar_to_sensor_transform[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OUSTER_ROS_MESSAGE_OS1CONFIGSRVRESPONSE_H
