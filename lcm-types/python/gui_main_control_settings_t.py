"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class gui_main_control_settings_t(object):
    __slots__ = ["mode", "impedance_scale", "enable", "emergency_damp", "zero_leg", "p_des", "v_des", "rpy_des", "omega_des", "p_des_slew_min", "p_des_slew_max", "rpy_des_slew_max", "v_des_slew_min", "v_des_slew_max", "omegab_des_slew_max", "emergency_damp_kd", "alexa_mode", "rc_configured", "bonus_knee_torque", "variable", "want_cheater_mode"]

    def __init__(self):
        self.mode = 0.0
        self.impedance_scale = 0.0
        self.enable = 0.0
        self.emergency_damp = 0.0
        self.zero_leg = [ 0.0 for dim0 in range(4) ]
        self.p_des = [ 0.0 for dim0 in range(3) ]
        self.v_des = [ 0.0 for dim0 in range(3) ]
        self.rpy_des = [ 0.0 for dim0 in range(3) ]
        self.omega_des = [ 0.0 for dim0 in range(3) ]
        self.p_des_slew_min = [ 0.0 for dim0 in range(3) ]
        self.p_des_slew_max = [ 0.0 for dim0 in range(3) ]
        self.rpy_des_slew_max = [ 0.0 for dim0 in range(3) ]
        self.v_des_slew_min = [ 0.0 for dim0 in range(3) ]
        self.v_des_slew_max = [ 0.0 for dim0 in range(3) ]
        self.omegab_des_slew_max = [ 0.0 for dim0 in range(3) ]
        self.emergency_damp_kd = 0.0
        self.alexa_mode = 0.0
        self.rc_configured = 0.0
        self.bonus_knee_torque = 0.0
        self.variable = [ 0.0 for dim0 in range(3) ]
        self.want_cheater_mode = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(gui_main_control_settings_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dddd", self.mode, self.impedance_scale, self.enable, self.emergency_damp))
        buf.write(struct.pack('>4d', *self.zero_leg[:4]))
        buf.write(struct.pack('>3d', *self.p_des[:3]))
        buf.write(struct.pack('>3d', *self.v_des[:3]))
        buf.write(struct.pack('>3d', *self.rpy_des[:3]))
        buf.write(struct.pack('>3d', *self.omega_des[:3]))
        buf.write(struct.pack('>3d', *self.p_des_slew_min[:3]))
        buf.write(struct.pack('>3d', *self.p_des_slew_max[:3]))
        buf.write(struct.pack('>3d', *self.rpy_des_slew_max[:3]))
        buf.write(struct.pack('>3d', *self.v_des_slew_min[:3]))
        buf.write(struct.pack('>3d', *self.v_des_slew_max[:3]))
        buf.write(struct.pack('>3d', *self.omegab_des_slew_max[:3]))
        buf.write(struct.pack(">dddd", self.emergency_damp_kd, self.alexa_mode, self.rc_configured, self.bonus_knee_torque))
        buf.write(struct.pack('>3d', *self.variable[:3]))
        buf.write(struct.pack(">d", self.want_cheater_mode))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != gui_main_control_settings_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return gui_main_control_settings_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = gui_main_control_settings_t()
        self.mode, self.impedance_scale, self.enable, self.emergency_damp = struct.unpack(">dddd", buf.read(32))
        self.zero_leg = struct.unpack('>4d', buf.read(32))
        self.p_des = struct.unpack('>3d', buf.read(24))
        self.v_des = struct.unpack('>3d', buf.read(24))
        self.rpy_des = struct.unpack('>3d', buf.read(24))
        self.omega_des = struct.unpack('>3d', buf.read(24))
        self.p_des_slew_min = struct.unpack('>3d', buf.read(24))
        self.p_des_slew_max = struct.unpack('>3d', buf.read(24))
        self.rpy_des_slew_max = struct.unpack('>3d', buf.read(24))
        self.v_des_slew_min = struct.unpack('>3d', buf.read(24))
        self.v_des_slew_max = struct.unpack('>3d', buf.read(24))
        self.omegab_des_slew_max = struct.unpack('>3d', buf.read(24))
        self.emergency_damp_kd, self.alexa_mode, self.rc_configured, self.bonus_knee_torque = struct.unpack(">dddd", buf.read(32))
        self.variable = struct.unpack('>3d', buf.read(24))
        self.want_cheater_mode = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if gui_main_control_settings_t in parents: return 0
        tmphash = (0x9935ccaf35f98390) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if gui_main_control_settings_t._packed_fingerprint is None:
            gui_main_control_settings_t._packed_fingerprint = struct.pack(">Q", gui_main_control_settings_t._get_hash_recursive([]))
        return gui_main_control_settings_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

