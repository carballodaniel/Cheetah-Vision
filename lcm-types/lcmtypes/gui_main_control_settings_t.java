/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class gui_main_control_settings_t implements lcm.lcm.LCMEncodable
{
    public double mode;
    public double impedance_scale;
    public double enable;
    public double emergency_damp;
    public double zero_leg[];
    public double p_des[];
    public double v_des[];
    public double rpy_des[];
    public double omega_des[];
    public double p_des_slew_min[];
    public double p_des_slew_max[];
    public double rpy_des_slew_max[];
    public double v_des_slew_min[];
    public double v_des_slew_max[];
    public double omegab_des_slew_max[];
    public double emergency_damp_kd;
    public double alexa_mode;
    public double rc_configured;
    public double bonus_knee_torque;
    public double variable[];
    public double want_cheater_mode;
 
    public gui_main_control_settings_t()
    {
        zero_leg = new double[4];
        p_des = new double[3];
        v_des = new double[3];
        rpy_des = new double[3];
        omega_des = new double[3];
        p_des_slew_min = new double[3];
        p_des_slew_max = new double[3];
        rpy_des_slew_max = new double[3];
        v_des_slew_min = new double[3];
        v_des_slew_max = new double[3];
        omegab_des_slew_max = new double[3];
        variable = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9935ccaf35f98390L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.gui_main_control_settings_t.class))
            return 0L;
 
        classes.add(lcmtypes.gui_main_control_settings_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeDouble(this.mode); 
 
        outs.writeDouble(this.impedance_scale); 
 
        outs.writeDouble(this.enable); 
 
        outs.writeDouble(this.emergency_damp); 
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.zero_leg[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.p_des[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.v_des[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.rpy_des[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.omega_des[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.p_des_slew_min[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.p_des_slew_max[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.rpy_des_slew_max[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.v_des_slew_min[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.v_des_slew_max[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.omegab_des_slew_max[a]); 
        }
 
        outs.writeDouble(this.emergency_damp_kd); 
 
        outs.writeDouble(this.alexa_mode); 
 
        outs.writeDouble(this.rc_configured); 
 
        outs.writeDouble(this.bonus_knee_torque); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.variable[a]); 
        }
 
        outs.writeDouble(this.want_cheater_mode); 
 
    }
 
    public gui_main_control_settings_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public gui_main_control_settings_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.gui_main_control_settings_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.gui_main_control_settings_t o = new lcmtypes.gui_main_control_settings_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.mode = ins.readDouble();
 
        this.impedance_scale = ins.readDouble();
 
        this.enable = ins.readDouble();
 
        this.emergency_damp = ins.readDouble();
 
        this.zero_leg = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.zero_leg[a] = ins.readDouble();
        }
 
        this.p_des = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.p_des[a] = ins.readDouble();
        }
 
        this.v_des = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.v_des[a] = ins.readDouble();
        }
 
        this.rpy_des = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy_des[a] = ins.readDouble();
        }
 
        this.omega_des = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.omega_des[a] = ins.readDouble();
        }
 
        this.p_des_slew_min = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.p_des_slew_min[a] = ins.readDouble();
        }
 
        this.p_des_slew_max = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.p_des_slew_max[a] = ins.readDouble();
        }
 
        this.rpy_des_slew_max = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy_des_slew_max[a] = ins.readDouble();
        }
 
        this.v_des_slew_min = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.v_des_slew_min[a] = ins.readDouble();
        }
 
        this.v_des_slew_max = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.v_des_slew_max[a] = ins.readDouble();
        }
 
        this.omegab_des_slew_max = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.omegab_des_slew_max[a] = ins.readDouble();
        }
 
        this.emergency_damp_kd = ins.readDouble();
 
        this.alexa_mode = ins.readDouble();
 
        this.rc_configured = ins.readDouble();
 
        this.bonus_knee_torque = ins.readDouble();
 
        this.variable = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.variable[a] = ins.readDouble();
        }
 
        this.want_cheater_mode = ins.readDouble();
 
    }
 
    public lcmtypes.gui_main_control_settings_t copy()
    {
        lcmtypes.gui_main_control_settings_t outobj = new lcmtypes.gui_main_control_settings_t();
        outobj.mode = this.mode;
 
        outobj.impedance_scale = this.impedance_scale;
 
        outobj.enable = this.enable;
 
        outobj.emergency_damp = this.emergency_damp;
 
        outobj.zero_leg = new double[(int) 4];
        System.arraycopy(this.zero_leg, 0, outobj.zero_leg, 0, 4); 
        outobj.p_des = new double[(int) 3];
        System.arraycopy(this.p_des, 0, outobj.p_des, 0, 3); 
        outobj.v_des = new double[(int) 3];
        System.arraycopy(this.v_des, 0, outobj.v_des, 0, 3); 
        outobj.rpy_des = new double[(int) 3];
        System.arraycopy(this.rpy_des, 0, outobj.rpy_des, 0, 3); 
        outobj.omega_des = new double[(int) 3];
        System.arraycopy(this.omega_des, 0, outobj.omega_des, 0, 3); 
        outobj.p_des_slew_min = new double[(int) 3];
        System.arraycopy(this.p_des_slew_min, 0, outobj.p_des_slew_min, 0, 3); 
        outobj.p_des_slew_max = new double[(int) 3];
        System.arraycopy(this.p_des_slew_max, 0, outobj.p_des_slew_max, 0, 3); 
        outobj.rpy_des_slew_max = new double[(int) 3];
        System.arraycopy(this.rpy_des_slew_max, 0, outobj.rpy_des_slew_max, 0, 3); 
        outobj.v_des_slew_min = new double[(int) 3];
        System.arraycopy(this.v_des_slew_min, 0, outobj.v_des_slew_min, 0, 3); 
        outobj.v_des_slew_max = new double[(int) 3];
        System.arraycopy(this.v_des_slew_max, 0, outobj.v_des_slew_max, 0, 3); 
        outobj.omegab_des_slew_max = new double[(int) 3];
        System.arraycopy(this.omegab_des_slew_max, 0, outobj.omegab_des_slew_max, 0, 3); 
        outobj.emergency_damp_kd = this.emergency_damp_kd;
 
        outobj.alexa_mode = this.alexa_mode;
 
        outobj.rc_configured = this.rc_configured;
 
        outobj.bonus_knee_torque = this.bonus_knee_torque;
 
        outobj.variable = new double[(int) 3];
        System.arraycopy(this.variable, 0, outobj.variable, 0, 3); 
        outobj.want_cheater_mode = this.want_cheater_mode;
 
        return outobj;
    }
 
}

